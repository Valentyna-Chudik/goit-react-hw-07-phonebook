{"version":3,"sources":["components/Filter/Filter.module.css","components/Container/Container.module.css","components/Section/Section.module.css","components/Notification/Notification.module.css","components/Container/Container.js","components/Section/Section.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-selectors.js","components/Form/Form.js","components/Filter/Filter.js","components/ContactsList/ContactsList.js","components/Notification/Notification.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/Form/Form.module.css","components/ContactsList/ContactsList.module.css"],"names":["module","exports","Container","children","className","styles","container","Section","title","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","filterChange","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","includes","Form","useSelector","dispatch","useDispatch","useState","setName","setNumber","handleInputChange","e","target","value","reset","form","onSubmit","preventDefault","trim","alert","find","contact","Number","isNaN","label","inputName","input","type","placeholder","onChange","buttonAdd","Filter","labelName","ContactsList","contactsList","map","contactsItem","contactName","buttonDelete","onClick","onDeleteContact","Notification","message","notification","App","length","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.de1939b7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1DhkN\",\"labelName\":\"Filter_labelName__3iH-w\",\"input\":\"Filter_input__3S9xA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__BDfV-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__33BAr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__3Ns3l\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './Container.module.css';\n\nexport default function Container({ children }) {\n  return <div className={styles.container}>{children}</div>;\n}\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nimport styles from './Section.module.css';\n\nexport default function Section({ title, children }) {\n  return (\n    <section>\n      <h2 className={styles.title}>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","// REDUX TOOLKIT\nimport { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction('contacts/Add', (name, number) => {\n  return {\n    payload: {\n      id: uuidv4(),\n      name,\n      number,\n    },\n  };\n});\n\nexport const deleteContact = createAction('contacts/Delete');\n\nexport const filterChange = createAction('contacts/FilterChange');\n\n// REDUX\n// import { v4 as uuidv4 } from 'uuid';\n// import { ADD, DELETE, FILTER_CHANGE } from './contacts-types';\n\n// export const addContact = (name, number) => ({\n//   type: ADD,\n//   payload: {\n//     id: uuidv4(),\n//     name,\n//     number,\n//   },\n// });\n\n// export const deleteContact = contactId => ({\n//   type: DELETE,\n//   payload: contactId,\n// });\n\n// export const filterChange = value => ({\n//   type: FILTER_CHANGE,\n//   payload: value,\n// });\n","export const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","// REACT-REDUX HOOKS\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { addContact } from '../../redux/contacts/contacts-actions';\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\nimport styles from './Form.module.css';\n\nexport default function Form() {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const onSubmit = (name, number) => dispatch(addContact(name, number));\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (name.trim() === '' || number.trim() === '') {\n      alert(`All fields must be completed.`);\n    } else if (contacts.find(contact => contact.name === name)) {\n      alert(`${name} is already in contacts.`);\n    } else if (contacts.find(contact => contact.number === number)) {\n      alert(`${number} is already in contacts.`);\n    } else if (Number.isNaN(+number)) {\n      alert('Phone number should consist only of digits.');\n    } else {\n      onSubmit(name, number);\n    }\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label className={styles.label}>\n        <span className={styles.inputName}>Name</span>\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Name\"\n          value={name}\n          onChange={handleInputChange}\n        ></input>\n      </label>\n      <label className={styles.label}>\n        <span className={styles.inputName}>Number</span>\n        <input\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Number\"\n          value={number}\n          onChange={handleInputChange}\n        ></input>\n      </label>\n      <button className={styles.buttonAdd} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\n// REDUX\n// import { useState } from 'react';\n// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\n\n// import { addContact } from '../../redux/contacts/contacts-actions';\n// import styles from './Form.module.css';\n\n// function Form({ contacts, onSubmit }) {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   const handleInputChange = e => {\n//     const { name, value } = e.target;\n\n//     switch (name) {\n//       case 'name':\n//         setName(value);\n//         break;\n\n//       case 'number':\n//         setNumber(value);\n//         break;\n\n//       default:\n//         return;\n//     }\n//   };\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n\n//     if (name.trim() === '' || number.trim() === '') {\n//       alert(`All fields must be completed.`);\n//     } else if (contacts.find(contact => contact.name === name)) {\n//       alert(`${name} is already in contacts.`);\n//     } else if (contacts.find(contact => contact.number === number)) {\n//       alert(`${number} is already in contacts.`);\n//     } else {\n//       onSubmit(name, number);\n//     }\n//     reset();\n//   };\n\n//   const reset = () => {\n//     setName('');\n//     setNumber('');\n//   };\n\n//   return (\n//     <form className={styles.form} onSubmit={handleSubmit}>\n//       <label className={styles.label}>\n//         <span className={styles.inputName}>Name</span>\n//         <input\n//           className={styles.input}\n//           type=\"text\"\n//           name=\"name\"\n//           placeholder=\"Name\"\n//           value={name}\n//           onChange={handleInputChange}\n//         ></input>\n//       </label>\n//       <label className={styles.label}>\n//         <span className={styles.inputName}>Number</span>\n//         <input\n//           className={styles.input}\n//           type=\"tel\"\n//           name=\"number\"\n//           placeholder=\"Number\"\n//           value={number}\n//           onChange={handleInputChange}\n//         ></input>\n//       </label>\n//       <button className={styles.buttonAdd} type=\"submit\">\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// }\n\n// Form.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = state => ({\n//   contacts: state.contacts.items,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onSubmit: (name, number) => dispatch(addContact(name, number)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Form);\n","// REACT-REDUX HOOKS\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { filterChange } from '../../redux/contacts/contacts-actions';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n\nimport styles from './Filter.module.css';\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onChange = e => dispatch(filterChange(e.target.value));\n\n  return (\n    <label className={styles.label}>\n      <span className={styles.labelName}>Find contacts by name</span>\n      <input\n        className={styles.input}\n        type=\"text\"\n        placeholder=\"Search...\"\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\n// REDUX\n\n// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\n\n// import { filterChange } from '../../redux/contacts/contacts-actions';\n\n// import styles from './Filter.module.css';\n\n// function Filter({ value, onChange }) {\n//   return (\n//     <label className={styles.label}>\n//       <span className={styles.labelName}>Find contacts by name</span>\n//       <input\n//         className={styles.input}\n//         type=\"text\"\n//         placeholder=\"Search...\"\n//         value={value}\n//         onChange={onChange}\n//       />\n//     </label>\n//   );\n// }\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = state => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: e => dispatch(filterChange(e.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","// REACT-REDUX HOOKS\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { deleteContact } from '../../redux/contacts/contacts-actions';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\nimport styles from './ContactsList.module.css';\n\nexport default function ContactsList() {\n  const contacts = useSelector(getVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => dispatch(deleteContact(id));\n\n  return (\n    <ul className={styles.contactsList}>\n      {contacts.map(({ id, name, number }) => (\n        <li className={styles.contactsItem} key={id}>\n          <p className={styles.contactName}>\n            {name}: {number}\n          </p>\n          <button\n            className={styles.buttonDelete}\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func,\n};\n\n// REDUX\n// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\n\n// import { deleteContact } from '../../redux/contacts/contacts-actions';\n// import styles from './ContactsList.module.css';\n\n// function ContactsList({ contacts, onDeleteContact }) {\n//   return (\n//     <ul className={styles.contactsList}>\n//       {contacts.map(({ id, name, number }) => (\n//         <li className={styles.contactsItem} key={id}>\n//           <p className={styles.contactName}>\n//             {name}: {number}\n//           </p>\n//           <button\n//             className={styles.buttonDelete}\n//             type=\"button\"\n//             onClick={() => onDeleteContact(id)}\n//           >\n//             Delete\n//           </button>\n//         </li>\n//       ))}\n//     </ul>\n//   );\n// }\n\n// ContactsList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     }),\n//   ),\n//   onDeleteContact: PropTypes.func.isRequired,\n// };\n\n// const getVisibleContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return allContacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   contacts: getVisibleContacts(items, filter),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: id => dispatch(deleteContact(id)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import PropTypes from 'prop-types';\nimport styles from './Notification.module.css';\n\nexport default function Notification({ message }) {\n  return <p className={styles.notification}> {message} </p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import Container from './components/Container/Container';\nimport Section from './components/Section/Section';\nimport Form from './components/Form/Form';\nimport Filter from './components/Filter/Filter';\nimport ContactsList from './components/ContactsList/ContactsList';\nimport Notification from './components/Notification/Notification';\nimport { getContacts } from './redux/contacts/contacts-selectors';\nimport { useSelector } from 'react-redux';\n\nexport default function App() {\n  const contacts = useSelector(getContacts);\n\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <Form />\n      </Section>\n      <Section title=\"Contacts\">\n        {contacts.length > 0 && <Filter />}\n        {contacts.length > 0 ? (\n          <ContactsList />\n        ) : (\n          <Notification message=\"No records yet.\" />\n        )}\n      </Section>\n    </Container>\n  );\n}\n","// REDUX TOOLKIT\nimport { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { addContact, deleteContact, filterChange } from './contacts-actions';\n\nconst items = createReducer([], {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [filterChange]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n\n// REDUX\n// import { combineReducers } from 'redux';\n// import { ADD, DELETE, FILTER_CHANGE } from './contacts-types';\n\n// const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case ADD:\n//       return [...state, payload];\n\n//     case DELETE:\n//       return state.filter(({ id }) => id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case FILTER_CHANGE:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n\n// export default combineReducers({\n//   items,\n//   filter,\n// });\n","// REACT TOOLKIT\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n\n// REDUX\n// import { createStore, combineReducers } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// import contactsReducer from './contacts/contacts-reducer';\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\n// export default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport 'modern-normalize/modern-normalize.css';\n\nimport './index.css';\nimport App from './App';\nimport { store, persistor } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__EHw6d\",\"inputName\":\"Form_inputName__3URID\",\"input\":\"Form_input__1LGGi\",\"buttonAdd\":\"Form_buttonAdd__1cOeD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"ContactsList_contactsList__3-HGb\",\"contactsItem\":\"ContactsList_contactsItem__3UGZR\",\"contactName\":\"ContactsList_contactName__wCaHA\",\"buttonDelete\":\"ContactsList_buttonDelete__2oy-P\"};"],"sourceRoot":""}